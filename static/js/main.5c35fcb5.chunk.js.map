{"version":3,"sources":["store/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx","store/actionType.ts","utils/loadable.js"],"names":["defaultStore","menuToggle","__REDUX_DEVTOOLS_EXTENSION__","window","store","createStore","state","action","type","MENU_TOGGLE","Layout","loadable","NotFound","ServerError","Login","App","exact","path","to","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Loading","props","NProgress","start","done","className","Component","loader","loading","Loadable"],"mappings":"2NAEMA,EAAe,CACnBC,YAAY,GCANC,EAAiCC,OAAjCD,6BAGOE,EAFDC,aDEC,WAA6C,IAApCC,EAAmC,uDAA3BN,EAAcO,EAAa,uCACjDC,EAASD,EAATC,KACR,OAAQA,GACN,KAAKC,IACH,OAAO,eAAKH,EAAZ,CAAmBL,YAAaK,EAAML,aACxC,QACE,OAAOK,KCRsBJ,GAAgCA,K,sBCC7DQ,G,MAASC,aAAS,kBAAM,gEACxBC,EAAWD,aAAS,kBAAM,iCAC1BE,EAAcF,aAAS,kBAAM,iCAC7BG,EAAQH,aAAS,kBAAM,8DAkBdI,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUC,GAAG,YAEf,kBAAC,IAAD,CAAOD,KAAK,SAASE,UAAWL,IAChC,kBAAC,IAAD,CAAOG,KAAK,OAAOE,UAAWP,IAC9B,kBAAC,IAAD,CAAOK,KAAK,OAAOE,UAAWN,IAC9B,kBAAC,IAAD,CAAOM,UAAWT,OCRNU,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OAEL,kBAAC,IAAD,CAAUrB,MAAOA,GACf,kBAAC,EAAD,OAGJsB,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,gCEjJ5B,sCAAM5B,EAAc,c,8HCOd6B,G,8DACJ,WAAYC,GAAQ,IAAD,6BACjB,cAAMA,GACNC,IAAUC,QAFO,E,gEAMjBD,IAAUE,S,+BAIV,OAAO,yBAAKC,UAAU,gBACpB,kBAAC,IAAD,W,GAZgBC,cAiBP,aAACC,GAA+B,IAAvBC,EAAsB,uDAAZR,EAChC,OAAOS,IAAS,CACdF,SACAC,c","file":"static/js/main.5c35fcb5.chunk.js","sourcesContent":["import { MENU_TOGGLE } from './actionType';\n\nconst defaultStore = {\n  menuToggle: false\n};\n\nexport default function(state = defaultStore, action: any) {\n  const { type } = action;\n  switch (type) {\n    case MENU_TOGGLE:\n      return { ...state, menuToggle: !state.menuToggle}\n    default:\n      return state\n  }\n}","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst { __REDUX_DEVTOOLS_EXTENSION__ } = window as any;\nconst store = createStore(reducer, __REDUX_DEVTOOLS_EXTENSION__ && __REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport loadable from './utils/loadable';\nimport './App.css';\n\nconst Layout = loadable(() => import(/* webpackChunkName: 'layout' */ './layout'));\nconst NotFound = loadable(() => import(/* webpackChunkName: '404' */ './views/error/404'))\nconst ServerError = loadable(() => import(/* webpackChunkName: '500' */ './views/error/500'))\nconst Login = loadable(() => import(/* webpackChunkName: 'login' */ './views/login/index'))\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/index\"></Redirect>\n        </Route>\n        <Route path=\"/login\" component={Login}></Route>\n        <Route path=\"/404\" component={NotFound}></Route>\n        <Route path=\"/500\" component={ServerError}></Route>\n        <Route component={Layout}></Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const MENU_TOGGLE = 'menuToggle';\n\nexport { MENU_TOGGLE }","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport NProgress from 'nprogress';\nimport { Spin } from 'antd';\nimport 'nprogress/nprogress.css';\nimport '../style/view/loading.scss'\n\nclass Loading extends Component {\n  constructor(props) {\n    super(props);\n    NProgress.start();\n  }\n\n  componentDidMount() {\n    NProgress.done();\n  }\n\n  render() {\n    return <div className=\"page-loading\">\n      <Spin />\n    </div>\n  }\n}\n\nexport default (loader, loading = Loading) => {\n  return Loadable({\n    loader,\n    loading\n  });\n}"],"sourceRoot":""}